// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using team40_iteration6_user.Team40;

namespace team40_iteration6_user.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20220910104057_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("team40_iteration6_user.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Province")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Admin", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdministratorEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdministratorName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdministratorPhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdministratorSurname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AdministratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.AttendingStatus", b =>
                {
                    b.Property<int>("AttendanceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttendanceStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttendanceStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AttendanceStatusId")
                        .HasName("PK_Attending Status");

                    b.ToTable("AttendingStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttendanceStatusId")
                        .HasColumnType("int")
                        .HasColumnName("AttendanceStatusID");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("BookingInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("BookingInstanceID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.HasKey("BookingId");

                    b.HasIndex("AttendanceStatusId");

                    b.HasIndex("BookingInstanceId");

                    b.HasIndex("ClientId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.BookingInstance", b =>
                {
                    b.Property<int>("BookingInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingInstanceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("BookingStatusID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopID");

                    b.HasKey("BookingInstanceId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("BookingInstance");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.BookingStatus", b =>
                {
                    b.Property<int>("BookingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.HasKey("BookingStatusId");

                    b.ToTable("BookingStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Brands", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("BrandId")
                        .HasName("PK__Brands__DAD4F05E4DF03281");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("CartId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ClientId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DeliveryCompany", b =>
                {
                    b.Property<int>("DeliveryCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCompanyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("DeliveryCompanyBaseRate")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("DeliveryCompanyEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryCompanyName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DeliveryCompanyId");

                    b.ToTable("DeliveryCompany");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountRequest", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DiscountStatusId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountStatusID");

                    b.Property<int?>("DiscountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountTypeID");

                    b.HasKey("DiscountId")
                        .HasName("PK_Discount Request");

                    b.HasIndex("DiscountStatusId");

                    b.HasIndex("DiscountTypeId");

                    b.ToTable("DiscountRequest");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountStatus", b =>
                {
                    b.Property<int>("DiscountStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DiscountStatusId");

                    b.ToTable("DiscountStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountType", b =>
                {
                    b.Property<int>("DiscountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("DiscountTypeId");

                    b.ToTable("DiscountType");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("QuantityOnHand")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.NewsletterSubscriber", b =>
                {
                    b.Property<int>("NewsletterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewsletterID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubscriberStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriberStatusID");

                    b.HasKey("NewsletterId")
                        .HasName("PK_Newsletter Subscriber");

                    b.HasIndex("ClientId");

                    b.HasIndex("SubscriberStatusId");

                    b.ToTable("NewsletterSubscriber");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeliveryCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryCompanyID");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryCompanyId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("OrderProductId")
                        .HasColumnType("int")
                        .HasColumnName("OrderProductID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId")
                        .HasName("PK_Order Product");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PayfastId")
                        .HasColumnType("int")
                        .HasColumnName("PayfastID");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("PaymentId");

                    b.HasIndex("CartId");

                    b.HasIndex("StatusId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.PaymentStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("StatusId");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .HasColumnType("int")
                        .HasColumnName("PolicyID");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)");

                    b.Property<string>("PolicyName")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)");

                    b.HasKey("PolicyId");

                    b.HasIndex("AdminId");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.PrepareOrder", b =>
                {
                    b.Property<int>("PrepareOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrepareOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrepareOrderId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("PrepareOrder");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("GetProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductColourId")
                        .HasColumnType("int")
                        .HasColumnName("ProductColourID");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductColourId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductColor", b =>
                {
                    b.Property<int>("ProductColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductColorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductColorId");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductPriceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal?>("ProductPrice1")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ProductPrice");

                    b.HasKey("ProductPriceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductRating", b =>
                {
                    b.Property<int>("ProductRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductRatingID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("Rating")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("ReviewDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductRatingId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRating");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.StockTake", b =>
                {
                    b.Property<int>("StockTakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StockTakeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<DateTime?>("StockTakeDate")
                        .HasColumnType("datetime");

                    b.HasKey("StockTakeId");

                    b.ToTable("StockTake");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.StockTakeTotal", b =>
                {
                    b.Property<int>("StockTakeTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StockTakeTotalID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<int?>("StocKtakeId")
                        .HasColumnType("int")
                        .HasColumnName("StocKTakeID");

                    b.Property<int?>("StockTakeTotalQty")
                        .HasColumnType("int")
                        .HasColumnName("StockTakeTotal_Qty");

                    b.HasKey("StockTakeTotalId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("StocKtakeId");

                    b.ToTable("StockTakeTotal");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SubscriberStatus", b =>
                {
                    b.Property<int>("SubscriberStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriberStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubscriberStatusId");

                    b.ToTable("SubscriberStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SupplierInventory", b =>
                {
                    b.Property<int>("SupplierPurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierPurchaseID");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<decimal?>("InventoryItemPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("SupplierInventoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SupplierInventoryID");

                    b.HasKey("SupplierPurchaseId")
                        .HasName("PK_Supplier Inventory");

                    b.HasIndex("InventoryId");

                    b.ToTable("SupplierInventory");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SupplierPurchase", b =>
                {
                    b.Property<int>("SupplierPurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierPurchaseID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("QuantityPurchased")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("SupplierPurchaseId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPurchase");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Supply", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SupplierPhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.VwBookingInstanceDetail", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BookingInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("BookingInstanceID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostSurname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VenueName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopID");

                    b.ToView("vw_BookingInstanceDetail");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.VwWorkShopDetail", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostSurname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VenueName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopID");

                    b.ToView("vw_WorkShopDetail");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Workshop", b =>
                {
                    b.Property<int>("WorkshopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HostId")
                        .HasColumnType("int")
                        .HasColumnName("HostID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("WorkshopDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkshopTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopTypeID");

                    b.Property<int>("WorkshopVenueId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopVenueID");

                    b.HasKey("WorkshopId");

                    b.HasIndex("HostId");

                    b.HasIndex("WorkshopTypeId");

                    b.HasIndex("WorkshopVenueId");

                    b.ToTable("Workshop");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopEquipment", b =>
                {
                    b.Property<int>("WorkshopEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopEquipmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("WorkshopEquipmentId");

                    b.ToTable("WorkshopEquipment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopHost", b =>
                {
                    b.Property<int>("HostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HostID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HostEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostSurname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("HostId");

                    b.ToTable("WorkshopHost");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopType", b =>
                {
                    b.Property<int>("WorkshopTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("WorkshopTypeId");

                    b.ToTable("WorkshopType");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopTypeEquipment", b =>
                {
                    b.Property<int>("WorkshopTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopTypeID");

                    b.Property<int>("WorkshopEquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("WorkshopEquipmentID");

                    b.HasKey("WorkshopTypeId", "WorkshopEquipmentId");

                    b.HasIndex("WorkshopEquipmentId");

                    b.ToTable("WorkshopType_Equipment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopVenue", b =>
                {
                    b.Property<int>("WorkshopVenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkshopVenueID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VenueName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("WorkshopVenueId");

                    b.ToTable("WorkshopVenue");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WriteOffInventory", b =>
                {
                    b.Property<int>("WriteOffId")
                        .HasColumnType("int")
                        .HasColumnName("WriteOffID");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<DateTime?>("WriteOffDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WriteOffQty")
                        .HasColumnType("int");

                    b.Property<int?>("WriteOffReasonId")
                        .HasColumnType("int")
                        .HasColumnName("WriteOffReasonID");

                    b.HasKey("WriteOffId")
                        .HasName("PK_Write-Off Inventory");

                    b.HasIndex("InventoryId");

                    b.HasIndex("WriteOffReasonId");

                    b.ToTable("WriteOffInventory");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WriteOffReason", b =>
                {
                    b.Property<int>("WriteOffReasonId")
                        .HasColumnType("int")
                        .HasColumnName("WriteOffReasonID");

                    b.Property<string>("WriteOffReasonDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WriteOffReason_Description");

                    b.HasKey("WriteOffReasonId");

                    b.ToTable("WriteOffReason");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Address", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Client", "Client")
                        .WithMany("Address")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Address_Client");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Admin", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.User", "User")
                        .WithMany("Admin")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Admin_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Booking", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.AttendingStatus", "AttendanceStatus")
                        .WithMany("Booking")
                        .HasForeignKey("AttendanceStatusId")
                        .HasConstraintName("FK_Booking_AttendingStatus");

                    b.HasOne("team40_iteration6_user.Models.BookingInstance", "BookingInstance")
                        .WithMany("Booking")
                        .HasForeignKey("BookingInstanceId")
                        .HasConstraintName("FK_Booking_BookingInstance")
                        .IsRequired();

                    b.HasOne("team40_iteration6_user.Models.Client", "Client")
                        .WithMany("Booking")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Booking_Client")
                        .IsRequired();

                    b.Navigation("AttendanceStatus");

                    b.Navigation("BookingInstance");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.BookingInstance", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.BookingStatus", "BookingStatus")
                        .WithMany("BookingInstance")
                        .HasForeignKey("BookingStatusId")
                        .HasConstraintName("FK_Booking Instance_BookingStatus");

                    b.HasOne("team40_iteration6_user.Models.Workshop", "Workshop")
                        .WithMany("BookingInstance")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_Booking Instance_Workshop");

                    b.Navigation("BookingStatus");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Cart", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Client", "Client")
                        .WithMany("Cart")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Cart_Client1");

                    b.HasOne("team40_iteration6_user.Models.Product", "Product")
                        .WithMany("Cart")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Cart_Product");

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Client", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Gender", "Gender")
                        .WithMany("Client")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Client_Gender");

                    b.HasOne("team40_iteration6_user.Models.User", "User")
                        .WithMany("Client")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Client_User");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountRequest", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.DiscountStatus", "DiscountStatus")
                        .WithMany("DiscountRequest")
                        .HasForeignKey("DiscountStatusId")
                        .HasConstraintName("FK_Discount Request_Discount Status");

                    b.HasOne("team40_iteration6_user.Models.DiscountType", "DiscountType")
                        .WithMany("DiscountRequest")
                        .HasForeignKey("DiscountTypeId")
                        .HasConstraintName("FK_Discount Request_Discount Type");

                    b.Navigation("DiscountStatus");

                    b.Navigation("DiscountType");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.NewsletterSubscriber", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Client", "Client")
                        .WithMany("NewsletterSubscriber")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_NewsletterSubscriber_Client");

                    b.HasOne("team40_iteration6_user.Models.SubscriberStatus", "SubscriberStatus")
                        .WithMany("NewsletterSubscriber")
                        .HasForeignKey("SubscriberStatusId")
                        .HasConstraintName("FK_Newsletter Subscriber_Subscriber Status");

                    b.Navigation("Client");

                    b.Navigation("SubscriberStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Order", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Address", "Address")
                        .WithMany("Order")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Order_Address");

                    b.HasOne("team40_iteration6_user.Models.Client", "Client")
                        .WithMany("Order")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Order_Client");

                    b.HasOne("team40_iteration6_user.Models.DeliveryCompany", "DeliveryCompany")
                        .WithMany("Order")
                        .HasForeignKey("DeliveryCompanyId")
                        .HasConstraintName("FK_Order_Delivery Company");

                    b.HasOne("team40_iteration6_user.Models.DiscountRequest", "Discount")
                        .WithMany("Order")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Order_Discount Request");

                    b.HasOne("team40_iteration6_user.Models.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_Order_Order Status");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("DeliveryCompany");

                    b.Navigation("Discount");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.OrderProduct", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Order", "Order")
                        .WithOne("OrderProduct")
                        .HasForeignKey("team40_iteration6_user.Models.OrderProduct", "OrderId")
                        .HasConstraintName("FK_Order Product_Order")
                        .IsRequired();

                    b.HasOne("team40_iteration6_user.Models.Product", "Product")
                        .WithMany("OrderProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Order Product_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Payment", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Cart", "Cart")
                        .WithMany("Payment")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_Payment_Cart");

                    b.HasOne("team40_iteration6_user.Models.PaymentStatus", "Status")
                        .WithMany("Payment")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Payment_PaymentStatus");

                    b.Navigation("Cart");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Policy", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Admin", "Admin")
                        .WithMany("Policy")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK_Policy_Admin");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.PrepareOrder", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Inventory", "Inventory")
                        .WithMany("PrepareOrder")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_PrepareOrder_Inventory");

                    b.HasOne("team40_iteration6_user.Models.Product", "Product")
                        .WithMany("PrepareOrder")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PrepareOrder_Product");

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Product", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.ProductColor", "ProductColour")
                        .WithMany("Product")
                        .HasForeignKey("ProductColourId")
                        .HasConstraintName("FK_Product_ProductColor");

                    b.HasOne("team40_iteration6_user.Models.ProductType", "ProductType")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK_Product_ProductType");

                    b.Navigation("ProductColour");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductPrice", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Product", "Product")
                        .WithMany("ProductPrice")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Product Price_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductRating", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.OrderProduct", "Product")
                        .WithMany("ProductRating")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductRating_Order Product");

                    b.HasOne("team40_iteration6_user.Models.Product", "ProductNavigation")
                        .WithMany("ProductRating")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductRating_Product");

                    b.Navigation("Product");

                    b.Navigation("ProductNavigation");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.StockTakeTotal", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Inventory", "Inventory")
                        .WithMany("StockTakeTotal")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Stock Take Total_Inventory");

                    b.HasOne("team40_iteration6_user.Models.StockTake", "StocKtake")
                        .WithMany("StockTakeTotal")
                        .HasForeignKey("StocKtakeId")
                        .HasConstraintName("FK_Stock Take Total_Stock Take");

                    b.Navigation("Inventory");

                    b.Navigation("StocKtake");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SupplierInventory", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Inventory", "Inventory")
                        .WithMany("SupplierInventory")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Supplier Inventory_Inventory");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SupplierPurchase", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.SupplierInventory", "Inventory")
                        .WithMany("SupplierPurchase")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Supplier Purchase_Supplier Inventory");

                    b.HasOne("team40_iteration6_user.Models.Supply", "Supplier")
                        .WithMany("SupplierPurchase")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Supplier Purchase_Supplier");

                    b.Navigation("Inventory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Workshop", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.WorkshopHost", "Host")
                        .WithMany("Workshop")
                        .HasForeignKey("HostId")
                        .HasConstraintName("FK_Workshop_WorkshopHost")
                        .IsRequired();

                    b.HasOne("team40_iteration6_user.Models.WorkshopType", "WorkshopType")
                        .WithMany("Workshop")
                        .HasForeignKey("WorkshopTypeId")
                        .HasConstraintName("FK_Workshop_WorkshopType")
                        .IsRequired();

                    b.HasOne("team40_iteration6_user.Models.WorkshopVenue", "WorkshopVenue")
                        .WithMany("Workshop")
                        .HasForeignKey("WorkshopVenueId")
                        .HasConstraintName("FK_Workshop_Venue")
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("WorkshopType");

                    b.Navigation("WorkshopVenue");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopTypeEquipment", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.WorkshopEquipment", "WorkshopEquipment")
                        .WithMany("WorkshopTypeEquipment")
                        .HasForeignKey("WorkshopEquipmentId")
                        .HasConstraintName("FK_WorkshopType_Equipment_WorkshopEquipment")
                        .IsRequired();

                    b.HasOne("team40_iteration6_user.Models.WorkshopType", "WorkshopType")
                        .WithMany("WorkshopTypeEquipment")
                        .HasForeignKey("WorkshopTypeId")
                        .HasConstraintName("FK_WorkshopType_Equipment_WorkshopType")
                        .IsRequired();

                    b.Navigation("WorkshopEquipment");

                    b.Navigation("WorkshopType");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WriteOffInventory", b =>
                {
                    b.HasOne("team40_iteration6_user.Models.Inventory", "Inventory")
                        .WithMany("WriteOffInventory")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Write-Off Inventory_Inventory");

                    b.HasOne("team40_iteration6_user.Models.WriteOffReason", "WriteOffReason")
                        .WithMany("WriteOffInventory")
                        .HasForeignKey("WriteOffReasonId")
                        .HasConstraintName("FK_Write-Off Inventory_WriteOffReason");

                    b.Navigation("Inventory");

                    b.Navigation("WriteOffReason");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Address", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Admin", b =>
                {
                    b.Navigation("Policy");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.AttendingStatus", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.BookingInstance", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.BookingStatus", b =>
                {
                    b.Navigation("BookingInstance");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Cart", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Client", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Booking");

                    b.Navigation("Cart");

                    b.Navigation("NewsletterSubscriber");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DeliveryCompany", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountRequest", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountStatus", b =>
                {
                    b.Navigation("DiscountRequest");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.DiscountType", b =>
                {
                    b.Navigation("DiscountRequest");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Gender", b =>
                {
                    b.Navigation("Client");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Inventory", b =>
                {
                    b.Navigation("PrepareOrder");

                    b.Navigation("StockTakeTotal");

                    b.Navigation("SupplierInventory");

                    b.Navigation("WriteOffInventory");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Order", b =>
                {
                    b.Navigation("OrderProduct");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.OrderProduct", b =>
                {
                    b.Navigation("ProductRating");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.OrderStatus", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Product", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("OrderProduct");

                    b.Navigation("PrepareOrder");

                    b.Navigation("ProductPrice");

                    b.Navigation("ProductRating");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductColor", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.ProductType", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.StockTake", b =>
                {
                    b.Navigation("StockTakeTotal");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SubscriberStatus", b =>
                {
                    b.Navigation("NewsletterSubscriber");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.SupplierInventory", b =>
                {
                    b.Navigation("SupplierPurchase");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Supply", b =>
                {
                    b.Navigation("SupplierPurchase");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.Workshop", b =>
                {
                    b.Navigation("BookingInstance");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopEquipment", b =>
                {
                    b.Navigation("WorkshopTypeEquipment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopHost", b =>
                {
                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopType", b =>
                {
                    b.Navigation("Workshop");

                    b.Navigation("WorkshopTypeEquipment");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WorkshopVenue", b =>
                {
                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("team40_iteration6_user.Models.WriteOffReason", b =>
                {
                    b.Navigation("WriteOffInventory");
                });
#pragma warning restore 612, 618
        }
    }
}
